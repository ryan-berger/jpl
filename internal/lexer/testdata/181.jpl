/* This blurs a picture */

fn blur(picture[W] : float[], sigma : float) : float[] {
   return array[i : W] ( \
     sum[j : W] ( \
       picture[j] * exp( 0.0 - float((i - j) * (i - j)) / (2.0 * sigma * sigma) ) ) )
}

fn blur2d(picture[W, H] : float[,], sigma : float) : float[,] {
    let blur_r = array[i : W] blur(array[j : H] picture[i, j], sigma)
    let transpose = array[i : H, j : W] blur_r[j][i]
    let blur_c = array[i : H] blur(array[j : W] transpose[i, j], sigma)
    return array[i : W, j : H] blur_c[i][j]
}

// Inlining this should lead to a big win. The naive computation allocates
// a 3*W*H*4 array for each of: photo_image; the input to blur; the output
// of blur; and blur_image. That memory usage can be cut in half by fusing
// the computation of blur inputs into the blur-sum and the computation of
// blur outputs into the blur_image.

read image "photo.png" to photo_image[W, H]
let sigma = 5.0
let blur_r = blur2d(array[i : W, j : H] photo_image[i, j]{0}, sigma)
let blur_g = blur2d(array[i : W, j : H] photo_image[i, j]{1}, sigma)
let blur_b = blur2d(array[i : W, j : H] photo_image[i, j]{2}, sigma)
let blur_a = blur2d(array[i : W, j : H] photo_image[i, j]{3}, sigma)
let blur_image = array[i : W, j : H] { blur_r[i, j], blur_g[i, j], blur_b[i, j], blur_a[i, j] }
write image blur_image to "photo_blur.png"
