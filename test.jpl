
fn g(i : int) : int {
    assert (i == 0), "should be non zero"
    return 1
}

fn f(i : int) : int {
    let x = 1 + i
    let y = i + i
    let z = g(1)
    let a = true
    let b = false
    let c = if (a || b) && a then 0 else 3
    return x * y * z
}

fn h({x : int, y : int, {z : int}}) : int {
    let a = 2
    let b = 3
    return a + b + z
}

fn i() : int {
    let z = sum[r : 10] r
    return z
}

fn j(x[h, w] : int[,]) : int {
    return h + w + x[2, 3]
}

fn k(z : int[,]) : int[] {
    let test = array[r : 33] (z[r, 0])
    return test
}

fn gen_black_pic(z : int, zz: int) : int[,] {
    return array[r : z, s : zz] 1
}


let photo[H, W] = gen_black_pic(33, 33)

show photo

