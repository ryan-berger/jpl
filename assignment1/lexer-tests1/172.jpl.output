NEWLINE
FN 'fn'
VARIABLE 'clamp'
LPAREN '('
VARIABLE 'i'
COLON ':'
VARIABLE 'int'
COMMA ','
VARIABLE 'min'
COLON ':'
VARIABLE 'int'
COMMA ','
VARIABLE 'max'
COLON ':'
VARIABLE 'int'
RPAREN ')'
COLON ':'
VARIABLE 'int'
LCURLY '{'
NEWLINE
ASSERT 'assert'
VARIABLE 'min'
OP '<='
VARIABLE 'max'
COMMA ','
STRING '"clamp called with empty range"'
NEWLINE
RETURN 'return'
LPAREN '('
IF 'if'
VARIABLE 'i'
OP '<'
VARIABLE 'min'
THEN 'then'
VARIABLE 'min'
ELSE 'else'
IF 'if'
VARIABLE 'i'
OP '>'
VARIABLE 'max'
THEN 'then'
VARIABLE 'max'
ELSE 'else'
VARIABLE 'i'
RPAREN ')'
NEWLINE
RCURLY '}'
NEWLINE
FN 'fn'
VARIABLE 'conv1d'
LPAREN '('
VARIABLE 'k'
LSQUARE '['
VARIABLE 'M'
RSQUARE ']'
COLON ':'
VARIABLE 'float'
LSQUARE '['
RSQUARE ']'
COMMA ','
VARIABLE 'a'
LSQUARE '['
VARIABLE 'N'
RSQUARE ']'
COLON ':'
VARIABLE 'float'
LSQUARE '['
RSQUARE ']'
RPAREN ')'
COLON ':'
VARIABLE 'float'
LSQUARE '['
RSQUARE ']'
LCURLY '{'
NEWLINE
ASSERT 'assert'
VARIABLE 'M'
OP '%'
INTVAL '2'
OP '=='
INTVAL '1'
COMMA ','
STRING '"conv1d called with even length kernel"'
NEWLINE
LET 'let'
VARIABLE 'm'
EQUALS '='
VARIABLE 'M'
OP '/'
INTVAL '2'
NEWLINE
RETURN 'return'
ARRAY 'array'
LSQUARE '['
VARIABLE 'i'
COLON ':'
VARIABLE 'N'
RSQUARE ']'
LPAREN '('
SUM 'sum'
LSQUARE '['
VARIABLE 'j'
COLON ':'
VARIABLE 'M'
RSQUARE ']'
LPAREN '('
VARIABLE 'k'
LSQUARE '['
VARIABLE 'j'
RSQUARE ']'
OP '*'
VARIABLE 'a'
LSQUARE '['
VARIABLE 'clamp'
LPAREN '('
VARIABLE 'i'
OP '-'
VARIABLE 'm'
OP '+'
VARIABLE 'j'
COMMA ','
INTVAL '0'
COMMA ','
VARIABLE 'N'
OP '-'
INTVAL '1'
RPAREN ')'
RSQUARE ']'
RPAREN ')'
RPAREN ')'
NEWLINE
RCURLY '}'
NEWLINE
FN 'fn'
VARIABLE 'conv1by2_row'
LPAREN '('
VARIABLE 'k'
LSQUARE '['
VARIABLE 'M'
RSQUARE ']'
COLON ':'
VARIABLE 'float'
LSQUARE '['
RSQUARE ']'
COMMA ','
VARIABLE 'a'
LSQUARE '['
VARIABLE 'N'
COMMA ','
VARIABLE 'K'
RSQUARE ']'
COLON ':'
VARIABLE 'float'
LSQUARE '['
COMMA ','
RSQUARE ']'
RPAREN ')'
COLON ':'
VARIABLE 'float'
LSQUARE '['
COMMA ','
RSQUARE ']'
LCURLY '{'
NEWLINE
LET 'let'
VARIABLE 'out'
EQUALS '='
ARRAY 'array'
LSQUARE '['
VARIABLE 'i'
COLON ':'
VARIABLE 'N'
RSQUARE ']'
VARIABLE 'conv1d'
LPAREN '('
VARIABLE 'k'
COMMA ','
ARRAY 'array'
LSQUARE '['
VARIABLE 'j'
COLON ':'
VARIABLE 'K'
RSQUARE ']'
VARIABLE 'a'
LSQUARE '['
VARIABLE 'i'
COMMA ','
VARIABLE 'j'
RSQUARE ']'
RPAREN ')'
NEWLINE
RETURN 'return'
ARRAY 'array'
LSQUARE '['
VARIABLE 'i'
COLON ':'
VARIABLE 'N'
COMMA ','
VARIABLE 'j'
COLON ':'
VARIABLE 'K'
RSQUARE ']'
VARIABLE 'out'
LSQUARE '['
VARIABLE 'i'
RSQUARE ']'
LSQUARE '['
VARIABLE 'j'
RSQUARE ']'
NEWLINE
RCURLY '}'
NEWLINE
FN 'fn'
VARIABLE 'transpose'
LPAREN '('
VARIABLE 'a'
LSQUARE '['
VARIABLE 'M'
COMMA ','
VARIABLE 'N'
RSQUARE ']'
COLON ':'
VARIABLE 'float'
LSQUARE '['
COMMA ','
RSQUARE ']'
RPAREN ')'
COLON ':'
VARIABLE 'float'
LSQUARE '['
COMMA ','
RSQUARE ']'
LCURLY '{'
NEWLINE
RETURN 'return'
ARRAY 'array'
LSQUARE '['
VARIABLE 'j'
COLON ':'
VARIABLE 'N'
COMMA ','
VARIABLE 'i'
COLON ':'
VARIABLE 'M'
RSQUARE ']'
VARIABLE 'a'
LSQUARE '['
VARIABLE 'i'
COMMA ','
VARIABLE 'j'
RSQUARE ']'
NEWLINE
RCURLY '}'
NEWLINE
FN 'fn'
VARIABLE 'conv1by2_col'
LPAREN '('
VARIABLE 'k'
LSQUARE '['
VARIABLE 'M'
RSQUARE ']'
COLON ':'
VARIABLE 'float'
LSQUARE '['
RSQUARE ']'
COMMA ','
VARIABLE 'a'
LSQUARE '['
VARIABLE 'N'
COMMA ','
VARIABLE 'K'
RSQUARE ']'
COLON ':'
VARIABLE 'float'
LSQUARE '['
COMMA ','
RSQUARE ']'
RPAREN ')'
COLON ':'
VARIABLE 'float'
LSQUARE '['
COMMA ','
RSQUARE ']'
LCURLY '{'
NEWLINE
RETURN 'return'
VARIABLE 'transpose'
LPAREN '('
VARIABLE 'conv1by2_row'
LPAREN '('
VARIABLE 'k'
COMMA ','
VARIABLE 'transpose'
LPAREN '('
VARIABLE 'a'
RPAREN ')'
RPAREN ')'
RPAREN ')'
NEWLINE
RCURLY '}'
NEWLINE
FN 'fn'
VARIABLE 'sobel_edge_detector'
LPAREN '('
VARIABLE 'a'
LSQUARE '['
VARIABLE 'N'
COMMA ','
VARIABLE 'M'
RSQUARE ']'
COLON ':'
VARIABLE 'float'
LSQUARE '['
COMMA ','
RSQUARE ']'
RPAREN ')'
COLON ':'
VARIABLE 'float'
LSQUARE '['
COMMA ','
RSQUARE ']'
LCURLY '{'
NEWLINE
LET 'let'
VARIABLE 'Gx_1r'
EQUALS '='
LSQUARE '['
FLOATVAL '1.0'
COMMA ','
FLOATVAL '0.0'
COMMA ','
OP '-'
FLOATVAL '1.0'
RSQUARE ']'
NEWLINE
LET 'let'
VARIABLE 'Gx_2c'
EQUALS '='
LSQUARE '['
FLOATVAL '1.0'
COMMA ','
FLOATVAL '2.0'
COMMA ','
FLOATVAL '1.0'
RSQUARE ']'
NEWLINE
LET 'let'
VARIABLE 'Gy_1r'
EQUALS '='
LSQUARE '['
FLOATVAL '1.0'
COMMA ','
FLOATVAL '2.0'
COMMA ','
FLOATVAL '1.0'
RSQUARE ']'
NEWLINE
LET 'let'
VARIABLE 'Gy_2c'
EQUALS '='
LSQUARE '['
FLOATVAL '1.0'
COMMA ','
FLOATVAL '0.0'
COMMA ','
OP '-'
FLOATVAL '1.0'
RSQUARE ']'
NEWLINE
LET 'let'
VARIABLE 'Gx'
EQUALS '='
VARIABLE 'conv1by2_col'
LPAREN '('
VARIABLE 'Gx_2c'
COMMA ','
VARIABLE 'conv1by2_row'
LPAREN '('
VARIABLE 'Gx_1r'
COMMA ','
VARIABLE 'a'
RPAREN ')'
RPAREN ')'
NEWLINE
LET 'let'
VARIABLE 'Gy'
EQUALS '='
VARIABLE 'conv1by2_col'
LPAREN '('
VARIABLE 'Gy_2c'
COMMA ','
VARIABLE 'conv1by2_row'
LPAREN '('
VARIABLE 'Gy_1r'
COMMA ','
VARIABLE 'a'
RPAREN ')'
RPAREN ')'
NEWLINE
RETURN 'return'
ARRAY 'array'
LSQUARE '['
VARIABLE 'i'
COLON ':'
VARIABLE 'N'
COMMA ','
VARIABLE 'j'
COLON ':'
VARIABLE 'M'
RSQUARE ']'
VARIABLE 'sqrt'
LPAREN '('
VARIABLE 'Gx'
LSQUARE '['
VARIABLE 'i'
COMMA ','
VARIABLE 'j'
RSQUARE ']'
OP '*'
VARIABLE 'Gx'
LSQUARE '['
VARIABLE 'i'
COMMA ','
VARIABLE 'j'
RSQUARE ']'
OP '+'
VARIABLE 'Gy'
LSQUARE '['
VARIABLE 'i'
COMMA ','
VARIABLE 'j'
RSQUARE ']'
OP '*'
VARIABLE 'Gy'
LSQUARE '['
VARIABLE 'i'
COMMA ','
VARIABLE 'j'
RSQUARE ']'
RPAREN ')'
NEWLINE
RCURLY '}'
NEWLINE
READ 'read'
VARIABLE 'image'
STRING '"photo.png"'
TO 'to'
VARIABLE 'photo_image'
LSQUARE '['
VARIABLE 'W'
COMMA ','
VARIABLE 'H'
RSQUARE ']'
NEWLINE
LET 'let'
VARIABLE 'green'
EQUALS '='
ARRAY 'array'
LSQUARE '['
VARIABLE 'i'
COLON ':'
VARIABLE 'W'
COMMA ','
VARIABLE 'j'
COLON ':'
VARIABLE 'H'
RSQUARE ']'
VARIABLE 'photo_image'
LSQUARE '['
VARIABLE 'i'
COMMA ','
VARIABLE 'j'
RSQUARE ']'
LCURLY '{'
INTVAL '1'
RCURLY '}'
NEWLINE
LET 'let'
VARIABLE 'green_edges'
EQUALS '='
VARIABLE 'sobel_edge_detector'
LPAREN '('
VARIABLE 'green'
RPAREN ')'
NEWLINE
LET 'let'
VARIABLE 'gray_edges'
EQUALS '='
ARRAY 'array'
LSQUARE '['
VARIABLE 'i'
COLON ':'
VARIABLE 'W'
COMMA ','
VARIABLE 'j'
COLON ':'
VARIABLE 'H'
RSQUARE ']'
LCURLY '{'
VARIABLE 'green_edges'
LSQUARE '['
VARIABLE 'i'
COMMA ','
VARIABLE 'j'
RSQUARE ']'
COMMA ','
VARIABLE 'green_edges'
LSQUARE '['
VARIABLE 'i'
COMMA ','
VARIABLE 'j'
RSQUARE ']'
COMMA ','
VARIABLE 'green_edges'
LSQUARE '['
VARIABLE 'i'
COMMA ','
VARIABLE 'j'
RSQUARE ']'
COMMA ','
FLOATVAL '1.0'
RCURLY '}'
NEWLINE
WRITE 'write'
VARIABLE 'image'
VARIABLE 'gray_edges'
TO 'to'
STRING '"photo_edges.png"'
NEWLINE
END_OF_FILE
Compilation succeeded
