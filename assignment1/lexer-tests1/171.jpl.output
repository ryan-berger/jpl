NEWLINE
FN 'fn'
VARIABLE 'gamma_decompress'
LPAREN '('
VARIABLE 'x'
COLON ':'
VARIABLE 'float'
RPAREN ')'
COLON ':'
VARIABLE 'float'
LCURLY '{'
NEWLINE
ASSERT 'assert'
FLOATVAL '0.0'
BINOP '<='
VARIABLE 'x'
BINOP '&&'
VARIABLE 'x'
BINOP '<='
FLOATVAL '1.0'
COMMA ','
STRING '"gamma_decompress argument out of range"'
NEWLINE
RETURN 'return'
IF 'if'
VARIABLE 'x'
BINOP '<='
FLOATVAL '0.04045'
THEN 'then'
VARIABLE 'x'
BINOP '/'
FLOATVAL '12.92'
ELSE 'else'
VARIABLE 'pow'
LPAREN '('
LPAREN '('
VARIABLE 'x'
BINOP '+'
FLOATVAL '0.055'
RPAREN ')'
BINOP '/'
FLOATVAL '1.055'
COMMA ','
FLOATVAL '2.4'
RPAREN ')'
NEWLINE
RCURLY '}'
NEWLINE
FN 'fn'
VARIABLE 'gamma_compress'
LPAREN '('
VARIABLE 'x'
COLON ':'
VARIABLE 'float'
RPAREN ')'
COLON ':'
VARIABLE 'float'
LCURLY '{'
NEWLINE
ASSERT 'assert'
FLOATVAL '0.0'
BINOP '<='
VARIABLE 'x'
BINOP '&&'
VARIABLE 'x'
BINOP '<='
FLOATVAL '1.0'
COMMA ','
STRING '"gamma_decompress argument out of range"'
NEWLINE
RETURN 'return'
VARIABLE 'pow'
LPAREN '('
VARIABLE 'x'
COMMA ','
FLOATVAL '2.2'
RPAREN ')'
NEWLINE
RCURLY '}'
NEWLINE
FN 'fn'
VARIABLE 'grayscale_pixel'
LPAREN '('
LCURLY '{'
VARIABLE 'r'
COLON ':'
VARIABLE 'float'
COMMA ','
VARIABLE 'g'
COLON ':'
VARIABLE 'float'
COMMA ','
VARIABLE 'b'
COLON ':'
VARIABLE 'float'
COMMA ','
VARIABLE 'a'
COLON ':'
VARIABLE 'float'
RCURLY '}'
RPAREN ')'
COLON ':'
LCURLY '{'
VARIABLE 'float'
COMMA ','
VARIABLE 'float'
COMMA ','
VARIABLE 'float'
COMMA ','
VARIABLE 'float'
RCURLY '}'
LCURLY '{'
NEWLINE
LET 'let'
VARIABLE 'r_linear'
EQUALS '='
VARIABLE 'gamma_decompress'
LPAREN '('
VARIABLE 'r'
RPAREN ')'
NEWLINE
LET 'let'
VARIABLE 'g_linear'
EQUALS '='
VARIABLE 'gamma_decompress'
LPAREN '('
VARIABLE 'g'
RPAREN ')'
NEWLINE
LET 'let'
VARIABLE 'b_linear'
EQUALS '='
VARIABLE 'gamma_decompress'
LPAREN '('
VARIABLE 'b'
RPAREN ')'
NEWLINE
LET 'let'
VARIABLE 'y_linear'
EQUALS '='
FLOATVAL '0.2126'
BINOP '*'
VARIABLE 'r_linear'
BINOP '+'
FLOATVAL '0.7152'
BINOP '*'
VARIABLE 'g_linear'
BINOP '+'
FLOATVAL '0.0722'
BINOP '*'
VARIABLE 'b_linear'
NEWLINE
LET 'let'
VARIABLE 'y'
EQUALS '='
VARIABLE 'gamma_compress'
LPAREN '('
VARIABLE 'y_linear'
RPAREN ')'
NEWLINE
RETURN 'return'
LCURLY '{'
VARIABLE 'y'
COMMA ','
VARIABLE 'y'
COMMA ','
VARIABLE 'y'
COMMA ','
FLOATVAL '1.0'
RCURLY '}'
NEWLINE
RCURLY '}'
NEWLINE
READ 'read'
VARIABLE 'image'
STRING '"photo.png"'
TO 'to'
VARIABLE 'photo_image'
LSQUARE '['
VARIABLE 'W'
COMMA ','
VARIABLE 'H'
RSQUARE ']'
NEWLINE
LET 'let'
VARIABLE 'grayscale_image'
EQUALS '='
ARRAY 'array'
LSQUARE '['
VARIABLE 'i'
COLON ':'
VARIABLE 'W'
COMMA ','
VARIABLE 'j'
COLON ':'
VARIABLE 'H'
RSQUARE ']'
VARIABLE 'grayscale_pixel'
LPAREN '('
VARIABLE 'photo_image'
LSQUARE '['
VARIABLE 'i'
COMMA ','
VARIABLE 'j'
RSQUARE ']'
RPAREN ')'
NEWLINE
WRITE 'write'
VARIABLE 'image'
VARIABLE 'grayscale_image'
TO 'to'
STRING '"photo_gray.png"'
NEWLINE
END_OF_FILE
Compilation succeeded
