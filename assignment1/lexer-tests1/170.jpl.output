NEWLINE
FN 'fn'
VARIABLE 'relu'
LPAREN '('
VARIABLE 'input'
COLON ':'
VARIABLE 'float'
RPAREN ')'
COLON ':'
VARIABLE 'float'
LCURLY '{'
NEWLINE
RETURN 'return'
IF 'if'
VARIABLE 'input'
OP '<'
FLOATVAL '0.0'
THEN 'then'
FLOATVAL '0.0'
ELSE 'else'
VARIABLE 'input'
NEWLINE
RCURLY '}'
NEWLINE
FN 'fn'
VARIABLE 'dense'
LPAREN '('
VARIABLE 'input'
LSQUARE '['
VARIABLE 'W'
COMMA ','
VARIABLE 'H'
RSQUARE ']'
COLON ':'
VARIABLE 'float'
LSQUARE '['
COMMA ','
RSQUARE ']'
COMMA ','
VARIABLE 'weights'
LSQUARE '['
VARIABLE 'Wi'
COMMA ','
VARIABLE 'Hi'
COMMA ','
VARIABLE 'Wo'
COMMA ','
VARIABLE 'Ho'
RSQUARE ']'
COLON ':'
VARIABLE 'float'
LSQUARE '['
COMMA ','
COMMA ','
COMMA ','
RSQUARE ']'
RPAREN ')'
COLON ':'
VARIABLE 'float'
LSQUARE '['
COMMA ','
RSQUARE ']'
LCURLY '{'
NEWLINE
ASSERT 'assert'
VARIABLE 'W'
OP '=='
VARIABLE 'Wi'
OP '&&'
VARIABLE 'H'
OP '=='
VARIABLE 'Hi'
COMMA ','
STRING '"Weight matrix doesn't match input size"'
NEWLINE
RETURN 'return'
ARRAY 'array'
LSQUARE '['
VARIABLE 'i'
COLON ':'
VARIABLE 'W'
COMMA ','
VARIABLE 'j'
COLON ':'
VARIABLE 'H'
RSQUARE ']'
VARIABLE 'relu'
LPAREN '('
SUM 'sum'
LSQUARE '['
VARIABLE 'i2'
COLON ':'
VARIABLE 'W'
COMMA ','
VARIABLE 'j2'
COLON ':'
VARIABLE 'H'
RSQUARE ']'
VARIABLE 'input'
LSQUARE '['
VARIABLE 'i2'
COMMA ','
VARIABLE 'j2'
RSQUARE ']'
OP '*'
VARIABLE 'weights'
LSQUARE '['
VARIABLE 'i2'
COMMA ','
VARIABLE 'j2'
COMMA ','
VARIABLE 'i'
COMMA ','
VARIABLE 'j'
RSQUARE ']'
RPAREN ')'
NEWLINE
RCURLY '}'
NEWLINE
FN 'fn'
VARIABLE 'softmax'
LPAREN '('
VARIABLE 'input'
LSQUARE '['
VARIABLE 'W'
COMMA ','
VARIABLE 'H'
RSQUARE ']'
COLON ':'
VARIABLE 'float'
LSQUARE '['
COMMA ','
RSQUARE ']'
COMMA ','
VARIABLE 'weights'
LSQUARE '['
VARIABLE 'N'
COMMA ','
VARIABLE 'Wi'
COMMA ','
VARIABLE 'Hi'
RSQUARE ']'
COLON ':'
VARIABLE 'float'
LSQUARE '['
COMMA ','
COMMA ','
RSQUARE ']'
RPAREN ')'
COLON ':'
VARIABLE 'float'
LSQUARE '['
RSQUARE ']'
LCURLY '{'
NEWLINE
ASSERT 'assert'
VARIABLE 'W'
OP '=='
VARIABLE 'Wi'
OP '&&'
VARIABLE 'H'
OP '=='
VARIABLE 'Hi'
COMMA ','
STRING '"Weight matrix doesn't match input size"'
NEWLINE
LET 'let'
VARIABLE 'intermediate'
EQUALS '='
ARRAY 'array'
LSQUARE '['
VARIABLE 'n'
COLON ':'
VARIABLE 'N'
RSQUARE ']'
SUM 'sum'
LSQUARE '['
VARIABLE 'i'
COLON ':'
VARIABLE 'W'
COMMA ','
VARIABLE 'j'
COLON ':'
VARIABLE 'H'
RSQUARE ']'
VARIABLE 'input'
LSQUARE '['
VARIABLE 'i'
COMMA ','
VARIABLE 'j'
RSQUARE ']'
OP '*'
VARIABLE 'weights'
LSQUARE '['
VARIABLE 'n'
COMMA ','
VARIABLE 'i'
COMMA ','
VARIABLE 'j'
RSQUARE ']'
NEWLINE
LET 'let'
VARIABLE 'expsum'
EQUALS '='
SUM 'sum'
LSQUARE '['
VARIABLE 'n'
COLON ':'
VARIABLE 'N'
RSQUARE ']'
VARIABLE 'exp'
LPAREN '('
VARIABLE 'intermediate'
LSQUARE '['
VARIABLE 'n'
RSQUARE ']'
RPAREN ')'
NEWLINE
RETURN 'return'
ARRAY 'array'
LSQUARE '['
VARIABLE 'n'
COLON ':'
VARIABLE 'N'
RSQUARE ']'
VARIABLE 'exp'
LPAREN '('
VARIABLE 'intermediate'
LSQUARE '['
VARIABLE 'n'
RSQUARE ']'
RPAREN ')'
OP '/'
VARIABLE 'expsum'
NEWLINE
RCURLY '}'
NEWLINE
FN 'fn'
VARIABLE 'bw'
LPAREN '('
VARIABLE 'image'
LSQUARE '['
VARIABLE 'W'
COMMA ','
VARIABLE 'H'
RSQUARE ']'
COLON ':'
VARIABLE 'float4'
LSQUARE '['
COMMA ','
RSQUARE ']'
COMMA ','
VARIABLE 'mi'
COLON ':'
VARIABLE 'float'
COMMA ','
VARIABLE 'ma'
COLON ':'
VARIABLE 'float'
RPAREN ')'
COLON ':'
VARIABLE 'float'
LSQUARE '['
COMMA ','
RSQUARE ']'
LCURLY '{'
NEWLINE
RETURN 'return'
ARRAY 'array'
LSQUARE '['
VARIABLE 'i'
COLON ':'
VARIABLE 'W'
COMMA ','
VARIABLE 'j'
COLON ':'
VARIABLE 'H'
RSQUARE ']'
VARIABLE 'image'
LSQUARE '['
VARIABLE 'i'
COMMA ','
VARIABLE 'j'
RSQUARE ']'
LCURLY '{'
INTVAL '1'
RCURLY '}'
OP '*'
LPAREN '('
VARIABLE 'ma'
OP '-'
VARIABLE 'mi'
RPAREN ')'
OP '+'
VARIABLE 'mi'
NEWLINE
RCURLY '}'
NEWLINE
FN 'fn'
VARIABLE 'max'
LPAREN '('
VARIABLE 'a'
LSQUARE '['
VARIABLE 'N'
RSQUARE ']'
COLON ':'
VARIABLE 'float'
LSQUARE '['
RSQUARE ']'
COMMA ','
VARIABLE 'i'
COLON ':'
VARIABLE 'int'
RPAREN ')'
COLON ':'
LCURLY '{'
VARIABLE 'int'
COMMA ','
VARIABLE 'float'
RCURLY '}'
LCURLY '{'
NEWLINE
LET 'let'
LCURLY '{'
VARIABLE 'idx'
COMMA ','
VARIABLE 'val'
RCURLY '}'
EQUALS '='
IF 'if'
VARIABLE 'N'
OP '=='
VARIABLE 'i'
OP '+'
INTVAL '1'
THEN 'then'
LCURLY '{'
INTVAL '0'
COMMA ','
FLOATVAL '0.0'
RCURLY '}'
ELSE 'else'
VARIABLE 'max'
LPAREN '('
VARIABLE 'a'
COMMA ','
VARIABLE 'i'
OP '+'
INTVAL '1'
RPAREN ')'
NEWLINE
RETURN 'return'
IF 'if'
VARIABLE 'val'
OP '<'
VARIABLE 'a'
LSQUARE '['
VARIABLE 'i'
RSQUARE ']'
THEN 'then'
LCURLY '{'
VARIABLE 'i'
COMMA ','
VARIABLE 'a'
LSQUARE '['
VARIABLE 'i'
RSQUARE ']'
RCURLY '}'
ELSE 'else'
LCURLY '{'
VARIABLE 'idx'
COMMA ','
VARIABLE 'val'
RCURLY '}'
NEWLINE
RCURLY '}'
NEWLINE
FN 'fn'
VARIABLE 'reshape'
LPAREN '('
VARIABLE 'weights'
LSQUARE '['
VARIABLE 'DW'
COMMA ','
VARIABLE 'DH'
RSQUARE ']'
COLON ':'
VARIABLE 'float'
LSQUARE '['
COMMA ','
RSQUARE ']'
COMMA ','
VARIABLE 'N'
COLON ':'
VARIABLE 'int'
COMMA ','
VARIABLE 'W'
COLON ':'
VARIABLE 'int'
COMMA ','
VARIABLE 'H'
COLON ':'
VARIABLE 'int'
RPAREN ')'
COLON ':'
LCURLY '{'
VARIABLE 'float'
LSQUARE '['
COMMA ','
COMMA ','
COMMA ','
RSQUARE ']'
COMMA ','
VARIABLE 'float'
LSQUARE '['
COMMA ','
COMMA ','
COMMA ','
RSQUARE ']'
COMMA ','
VARIABLE 'float'
LSQUARE '['
COMMA ','
COMMA ','
RSQUARE ']'
RCURLY '}'
LCURLY '{'
NEWLINE
ASSERT 'assert'
VARIABLE 'DW'
OP '=='
VARIABLE 'W'
OP '*'
VARIABLE 'H'
OP '+'
VARIABLE 'W'
OP '*'
VARIABLE 'H'
OP '+'
VARIABLE 'N'
COMMA ','
STRING '"Invalid data width"'
NEWLINE
ASSERT 'assert'
VARIABLE 'DH'
OP '=='
VARIABLE 'W'
OP '*'
VARIABLE 'H'
COMMA ','
STRING '"Invalid data height"'
NEWLINE
RETURN 'return'
LCURLY '{'
ARRAY 'array'
LSQUARE '['
VARIABLE 'i'
COLON ':'
VARIABLE 'W'
COMMA ','
VARIABLE 'j'
COLON ':'
VARIABLE 'H'
COMMA ','
VARIABLE 'i2'
COLON ':'
VARIABLE 'W'
COMMA ','
VARIABLE 'j2'
COLON ':'
VARIABLE 'H'
RSQUARE ']'
VARIABLE 'weights'
LSQUARE '['
VARIABLE 'i2'
OP '+'
VARIABLE 'j2'
OP '*'
VARIABLE 'W'
COMMA ','
VARIABLE 'i'
OP '+'
VARIABLE 'j'
OP '*'
VARIABLE 'W'
RSQUARE ']'
COMMA ','
ARRAY 'array'
LSQUARE '['
VARIABLE 'i'
COLON ':'
VARIABLE 'W'
COMMA ','
VARIABLE 'j'
COLON ':'
VARIABLE 'H'
COMMA ','
VARIABLE 'i2'
COLON ':'
VARIABLE 'W'
COMMA ','
VARIABLE 'j2'
COLON ':'
VARIABLE 'H'
RSQUARE ']'
VARIABLE 'weights'
LSQUARE '['
VARIABLE 'W'
OP '*'
VARIABLE 'H'
OP '+'
VARIABLE 'i2'
OP '+'
VARIABLE 'j2'
OP '*'
VARIABLE 'W'
COMMA ','
VARIABLE 'i'
OP '+'
VARIABLE 'j'
OP '*'
VARIABLE 'W'
RSQUARE ']'
COMMA ','
ARRAY 'array'
LSQUARE '['
VARIABLE 'n'
COLON ':'
VARIABLE 'N'
COMMA ','
VARIABLE 'i2'
COLON ':'
VARIABLE 'W'
COMMA ','
VARIABLE 'j2'
COLON ':'
VARIABLE 'H'
RSQUARE ']'
VARIABLE 'weights'
LSQUARE '['
INTVAL '2'
OP '*'
VARIABLE 'W'
OP '*'
VARIABLE 'H'
OP '+'
VARIABLE 'n'
COMMA ','
VARIABLE 'i2'
OP '+'
VARIABLE 'j2'
OP '*'
VARIABLE 'W'
RSQUARE ']'
RCURLY '}'
NEWLINE
RCURLY '}'
NEWLINE
FN 'fn'
VARIABLE 'recognize'
LPAREN '('
VARIABLE 'image'
LSQUARE '['
VARIABLE 'W'
COMMA ','
VARIABLE 'H'
RSQUARE ']'
COLON ':'
VARIABLE 'float'
LSQUARE '['
COMMA ','
RSQUARE ']'
COMMA ','
VARIABLE 'layer1'
COLON ':'
VARIABLE 'float'
LSQUARE '['
COMMA ','
COMMA ','
COMMA ','
RSQUARE ']'
COMMA ','
VARIABLE 'layer2'
COLON ':'
VARIABLE 'float'
LSQUARE '['
COMMA ','
COMMA ','
COMMA ','
RSQUARE ']'
COMMA ','
VARIABLE 'layer3'
COLON ':'
VARIABLE 'float'
LSQUARE '['
COMMA ','
COMMA ','
RSQUARE ']'
RPAREN ')'
COLON ':'
LCURLY '{'
VARIABLE 'int'
COMMA ','
VARIABLE 'float'
RCURLY '}'
LCURLY '{'
NEWLINE
LET 'let'
VARIABLE 'i1'
EQUALS '='
VARIABLE 'dense'
LPAREN '('
VARIABLE 'image'
COMMA ','
VARIABLE 'layer1'
RPAREN ')'
NEWLINE
LET 'let'
VARIABLE 'i2'
EQUALS '='
VARIABLE 'dense'
LPAREN '('
VARIABLE 'i1'
COMMA ','
VARIABLE 'layer2'
RPAREN ')'
NEWLINE
LET 'let'
VARIABLE 'out'
EQUALS '='
VARIABLE 'softmax'
LPAREN '('
VARIABLE 'i2'
COMMA ','
VARIABLE 'layer3'
RPAREN ')'
NEWLINE
RETURN 'return'
VARIABLE 'max'
LPAREN '('
VARIABLE 'out'
COMMA ','
INTVAL '0'
RPAREN ')'
NEWLINE
RCURLY '}'
NEWLINE
LET 'let'
LCURLY '{'
VARIABLE 'W'
COMMA ','
VARIABLE 'H'
COMMA ','
VARIABLE 'N'
RCURLY '}'
EQUALS '='
LCURLY '{'
INTVAL '28'
COMMA ','
INTVAL '28'
COMMA ','
INTVAL '10'
RCURLY '}'
NEWLINE
READ 'read'
VARIABLE 'image'
STRING '"input.png"'
TO 'to'
VARIABLE 'input'
LSQUARE '['
VARIABLE 'IW'
COMMA ','
VARIABLE 'IH'
RSQUARE ']'
NEWLINE
ASSERT 'assert'
VARIABLE 'IW'
OP '=='
VARIABLE 'W'
COMMA ','
STRING '"Invalid input width"'
NEWLINE
ASSERT 'assert'
VARIABLE 'IH'
OP '=='
VARIABLE 'H'
COMMA ','
STRING '"Invalid input height"'
NEWLINE
READ 'read'
VARIABLE 'image'
STRING '"layers.png"'
TO 'to'
VARIABLE 'layers'
LSQUARE '['
VARIABLE 'DW'
COMMA ','
VARIABLE 'DH'
RSQUARE ']'
NEWLINE
ASSERT 'assert'
VARIABLE 'DW'
OP '=='
VARIABLE 'W'
OP '*'
VARIABLE 'H'
OP '+'
VARIABLE 'W'
OP '*'
VARIABLE 'H'
OP '+'
VARIABLE 'N'
COMMA ','
STRING '"Invalid layer data width"'
NEWLINE
ASSERT 'assert'
VARIABLE 'DH'
OP '=='
VARIABLE 'W'
OP '*'
VARIABLE 'H'
COMMA ','
STRING '"Invalid layer data height"'
NEWLINE
LET 'let'
LCURLY '{'
VARIABLE 'layer1'
COMMA ','
VARIABLE 'layer2'
COMMA ','
VARIABLE 'layer3'
RCURLY '}'
EQUALS '='
VARIABLE 'reshape'
LPAREN '('
VARIABLE 'bw'
LPAREN '('
VARIABLE 'layers'
COMMA ','
OP '-'
FLOATVAL '0.22206303'
COMMA ','
FLOATVAL '0.23117281'
RPAREN ')'
COMMA ','
VARIABLE 'N'
COMMA ','
VARIABLE 'W'
COMMA ','
VARIABLE 'H'
RPAREN ')'
NEWLINE
TIME 'time'
SHOW 'show'
VARIABLE 'recognize'
LPAREN '('
VARIABLE 'bw'
LPAREN '('
VARIABLE 'input'
COMMA ','
FLOATVAL '0.0'
COMMA ','
FLOATVAL '1.0'
RPAREN ')'
COMMA ','
VARIABLE 'layer1'
COMMA ','
VARIABLE 'layer2'
COMMA ','
VARIABLE 'layer3'
RPAREN ')'
NEWLINE
END_OF_FILE
Compilation succeeded
